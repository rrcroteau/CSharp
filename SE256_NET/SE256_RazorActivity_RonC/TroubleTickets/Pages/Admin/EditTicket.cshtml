@page
@model TroubleTickets.Pages.Admin.EditTicketModel
@{
    ViewData["Title"] = "Edit Ticket";
}

<h1>Edit Ticket</h1>

<br />

<form method="post">

    @* We are using regular HTML to create the form, binding to specific class properties, but showing more user-friendly desc *@

    <div class="form-group">
        <label asp-for="tTicket.Ticket_Title"></label>
        <input type="text" class="form-control" asp-for="tTicket.Ticket_Title" placeholder="Ticket Title" />
        <span asp-validation-for="tTicket.Ticket_Title" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="tTicket.Ticket_Desc"></label>
        <input type="text" class="form-control" asp-for="tTicket.Ticket_Desc" placeholder="Description of Problem" />
        <span asp-validation-for="tTicket.Ticket_Desc" class="text-danger"></span>
    </div>

    @*<div class="form-group">
            <label asp-for="tTicket.Category"></label>
            <select asp-for="tTicket.Category" class="form-control">




            </select>
            <span asp-validation-for="tTicket.Category" class="text-danger"></span>
        </div>*@

    <div class="form-group">
        <label asp-for="tTicket.Category"></label>
        <input asp-for="tTicket.Category" class="form-control" type="text" placeholder="Category" />
        <span asp-validation-for="tTicket.Category" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="tTicket.Reporting_Email"></label>
        <input type="text" class="form-control" asp-for="tTicket.Reporting_Email" placeholder="Poster" />
        <span asp-validation-for="tTicket.Reporting_Email" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="tTicket.Orig_Date"></label>
        <input type="text" class="form-control" asp-for="tTicket.Orig_Date" placeholder="Post Date" />
        <span asp-validation-for="tTicket.Orig_Date" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="tTicket.Responder_Email"></label>
        <input type="text" class="form-control" asp-for="tTicket.Responder_Email" placeholder="Responder" />
        <span asp-validation-for="tTicket.Responder_Email" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="tTicket.Responder_Notes"></label>
        <input type="text" class="form-control" asp-for="tTicket.Responder_Notes" placeholder="Notes" />
        <span asp-validation-for="tTicket.Responder_Notes" class="text-danger"></span>
    </div>

    @* Use a selection list here-- this is a bit in the DB, binary (0,1) value we can use Boolean (true: 1, false: 2) *@

    <div class="form-group">
        <label asp-for="tTicket.Active" class="control-label"></label>
        <select asp-for="tTicket.Active" class="form-control">
            <option value="">--Select Active Level--</option>
            <option value="false">Closed</option>
            <option value="true">Active</option>
        </select>
    </div>

    @* Hidden field with the ID. We don't want users to play with this value, so why not hide it *@
    <input asp-for="tTicket.Ticket_ID" type="hidden" class="form-control" />

    @* Button will submit the form data via a post method *@
    <button type="submit">Update</button>

</form>

@* Scripts to incorporate the client side validation of input fields in the View *@
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

@{
    //if the form data is not null, display some feedback to the user
    if (Model.tTicket != null && Model.tTicket.Feedback != null)
    {
        <br />
        <h1>Results</h1>
        <p>@Model.tTicket.Feedback</p>

    }
}