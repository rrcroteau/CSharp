@page
@model EnergyDrinks.Pages.Admin.EditDrinkModel
@{
    ViewData["Title"] = "Edit Drink";
}

<h1>Edit Drink</h1>

<br />

<form method="post">

    @* We are using regular HTML to create the form, binding to specific class properties, but showing more user-friendly desc *@

    <div class="form-group">
        <label asp-for="TempDrink.Mfr"></label>
        <input type="text" class="form-control" asp-for="TempDrink.Mfr" placeholder="Drink Manufacturer" />
        <span asp-validation-for="TempDrink.Mfr" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="TempDrink.Name"></label>
        <input type="text" class="form-control" asp-for="TempDrink.Name" placeholder="Drink Name" />
        <span asp-validation-for="TempDrink.Name" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="TempDrink.Flavor"></label>
        <input asp-for="TempDrink.Flavor" class="form-control" type="text" placeholder="Flavor" />
        <span asp-validation-for="TempDrink.Flavor" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="TempDrink.Size"></label>
        <input type="text" class="form-control" asp-for="TempDrink.Size" placeholder="Size" />
        <span asp-validation-for="TempDrink.Size" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="TempDrink.Price"></label>
        <input type="text" class="form-control" asp-for="TempDrink.Price" placeholder="Price" />
        <span asp-validation-for="TempDrink.Price" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="TempDrink.Support_Email"></label>
        <input type="text" class="form-control" asp-for="TempDrink.Support_Email" placeholder="Support Email" />
        <span asp-validation-for="TempDrink.Support_Email" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="TempDrink.Release_Date"></label>
        <input type="text" class="form-control" asp-for="TempDrink.Release_Date" placeholder="Release Date" />
        <span asp-validation-for="TempDrink.Release_Date" class="text-danger"></span>
    </div>

    @* Use a selection list here-- this is a bit in the DB, binary (0,1) value we can use Boolean (true: 1, false: 2) *@

    <div class="form-group">
        <label asp-for="TempDrink.Active" class="control-label"></label>
        <select asp-for="TempDrink.Active" class="form-control">
            <option value="">--Select Active Level--</option>
            <option value="false">Discontinued</option>
            <option value="true">Active</option>
        </select>
    </div>

    @* Hidden field with the ID. We don't want users to play with this value, so why not hide it *@
    <input asp-for="TempDrink.Drink_ID" type="hidden" class="form-control" />

    @* Button will submit the form data via a post method *@
    <button type="submit">Update</button>

</form>

@* Scripts to incorporate the client side validation of input fields in the View *@
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

@{
    //if the form data is not null, display some feedback to the user
    if (Model.TempDrink != null && Model.TempDrink.Feedback != null)
    {
        <br />
        <h1>Results</h1>
        <p>@Model.TempDrink.Feedback</p>

    }
}